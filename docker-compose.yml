services:
  elasticsearch:
    container_name: elasticsearch
    build: Services/Elasticsearch
    restart: always
    networks:
      - elastic
    volumes:
      - ./Services/Elasticsearch/token_elk:/usr/share/elasticsearch/token_elk
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - ELASTIC_PASSWORD=1234
    healthcheck:
      test: ["CMD-SHELL", "curl -s https://localhost:9200/_cluster/health | grep -vq '\"status\":\"red'"]
      interval: 30s
      timeout: 30s
      retries: 3

  logstash_nginx:
    container_name: logstash_nginx
    image: docker.elastic.co/logstash/logstash:8.13.2
    restart: always
    networks:
      - elastic
    volumes:
      - ./Services/Logstash/logstash_nginx.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - "ELASTICSEARCH_HOST=elasticsearch"
      - "ELASTICSEARCH_PORT=9200"
    depends_on:
      - elasticsearch

  logstash_gunicorn:
    container_name: logstash_gunicorn
    image: docker.elastic.co/logstash/logstash:8.13.2
    restart: always
    networks:
      - elastic
    volumes:
      - ./Services/Logstash/logstash_gunicorn.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - "ELASTICSEARCH_HOST=elasticsearch"
      - "ELASTICSEARCH_PORT=9200"
      - "ELASTICSEARCH_USER=elastic"
      - "ELASTICSEARCH_PASSWORD=1234"
    depends_on:
      - elasticsearch

  rsyslog:
    container_name: rsyslog
    build: Services/Rsyslog
    restart: always
    ports:
      - "5142:5142"
      - "5142:5142/udp"

  kibana:
    container_name: kibana
    build: Services/Kibana
    restart: always
    networks:
      - elastic
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  gunicorn:
    container_name: gunicorn
    build: Services/Gunicorn
    restart: always
    env_file: .env
    volumes:
      - django_data:/app/Project
    depends_on:
      postgres:
        condition: service_healthy

  uvicorn:
    container_name: uvicorn
    build: Services/Uvicorn
    restart: always
    env_file: .env
    volumes:
      - django_data:/app/Project
    depends_on:
      - postgres

  postgres:
    container_name: database
    image: postgres:16.1-alpine3.18
    restart: always
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval:  5s
      timeout:  5s
      retries:  5

  nginx:
    container_name: nginx
    build: Services/NginxReverseProxy/
    restart: always
    env_file: .env
    ports:
    - "8080:8080"
    volumes:
      - django_static:/var/lib/nginx/static/
      - django_media:/var/lib/nginx/avatars/
    depends_on:
      - gunicorn
      - uvicorn

  adminer:
    container_name: adminer
    image: adminer:latest
    restart: always
    ports:
      - "8081:8080"
    depends_on:
      - postgres

volumes:
  postgres_data:
    name: postgres_data

  django_data:
    name: django_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: Django_data

  django_static:
    name: django_static
    driver: local
    driver_opts:
      type: none
      o: bind
      device: Django_data/staticfiles

  django_media:
    name: django_media
    driver: local
    driver_opts:
      type: none
      o: bind
      device: Django_data/avatars

networks:
  elastic:
    driver: bridge
