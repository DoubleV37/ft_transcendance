volumes:
  postgres_data:
    name: postgres_data
  django_data:
    name: django_data
    driver: local
    driver_opts:
      type: none
      o: bind
      device: Django_data
  django_static:
    name: django_static
    driver: local
    driver_opts:
      type: none
      o: bind
      device: Django_data/staticfiles
  django_media:
    name: django_media
    driver: local
    driver_opts:
      type: none
      o: bind
      device: Django_data/avatars
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  logstashdata01:
    driver: local
  logstashdata02:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.37.9
    volumes:
      - ./Services/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"

  grafana:
    container_name: grafana
    image: grafana/grafana:8.3.3
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"

  node_exporter:
    container_name: node_exporter
    image: quay.io/prometheus/node-exporter:v1.5.0
    command: '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - /:/host:ro,rslave

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    command:
      - '-port=8098'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    restart: unless-stopped

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ./Services/Elasticsearch/setup.sh:/usr/share/elasticsearch/setup.sh
    user: "0"
    env_file: .env
    command: >
      bash -c '
        chmod 777 /usr/share/elasticsearch/setup.sh &&
        /usr/share/elasticsearch/setup.sh
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    container_name: es01
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash_nginx:
    container_name: logstash_nginx
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./Services/Logstash/logstash_nginx.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200

  logstash_gunicorn:
    container_name: logstash_gunicorn
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata02:/usr/share/logstash/data
      - "./Services/Logstash/logstash_gunicorn.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200

  rsyslog:
    container_name: rsyslog
    build: Services/Rsyslog
    restart: always
    ports:
      - "5142:5142"
      - "5142:5142/udp"

  kibana:
    container_name: kibana
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  gunicorn:
    container_name: gunicorn
    build: Services/Gunicorn
    restart: always
    env_file: .env
    volumes:
      - django_data:/app/Project
    depends_on:
      postgres:
        condition: service_healthy

  uvicorn:
    container_name: uvicorn
    build: Services/Uvicorn
    restart: always
    env_file: .env
    volumes:
      - django_data:/app/Project
    depends_on:
      - postgres

  postgres:
    container_name: database
    image: postgres:16.1-alpine3.18
    restart: always
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval:  5s
      timeout:  5s
      retries:  5

  redis:
    container_name: redis
    image: redis:6.2.6-alpine
    restart: always

  nginx:
    container_name: nginx
    build: Services/NginxReverseProxy/
    restart: always
    env_file: .env
    ports:
    - "8080:8080"
    volumes:
      - django_static:/var/lib/nginx/static/
      - django_media:/var/lib/nginx/avatars/
    depends_on:
      - gunicorn
      - uvicorn

  adminer:
    container_name: adminer
    image: adminer:latest
    restart: always
    ports:
      - "8081:8080"
    depends_on:
      - postgres

  pong:
    container_name: pong
    build: Services/PongServer
    env_file: .env
    restart: always
    volumes:
      - ./Services/PongServer/ServerFile:/Server
    depends_on:
      - nginx
